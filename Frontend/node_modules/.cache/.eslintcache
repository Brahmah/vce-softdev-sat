[{"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/index.js":"1","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/reportWebVitals.js":"2","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/App.js":"3","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/navBar.js":"4","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/views/entityDetail.js":"5","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/views/areas.js":"6","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/views/entities.js":"7","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/entityFieldGroups.js":"8","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/entitySideDetail.js":"9","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/loading.js":"10","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/uptimeChart.js":"11","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/entityField.js":"12"},{"size":620,"mtime":1650070867630,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1649920012634,"results":"15","hashOfConfig":"14"},{"size":1836,"mtime":1650072165864,"results":"16","hashOfConfig":"14"},{"size":1724,"mtime":1650115184670,"results":"17","hashOfConfig":"14"},{"size":1759,"mtime":1650070327984,"results":"18","hashOfConfig":"14"},{"size":5069,"mtime":1650113722300,"results":"19","hashOfConfig":"14"},{"size":2467,"mtime":1650115012895,"results":"20","hashOfConfig":"14"},{"size":1801,"mtime":1650017578606,"results":"21","hashOfConfig":"14"},{"size":2053,"mtime":1650031474151,"results":"22","hashOfConfig":"14"},{"size":1507,"mtime":1650006458064,"results":"23","hashOfConfig":"14"},{"size":2394,"mtime":1650002789475,"results":"24","hashOfConfig":"14"},{"size":3001,"mtime":1650070756562,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fa0fth",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/index.js",[],[],"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/reportWebVitals.js",[],[],"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/App.js",["67"],[],"import \"./App.css\";\nimport { NavBar } from \"./components/navBar\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Outlet,\n  Link,\n} from \"react-router-dom\";\nimport EntitiesView from \"./views/entities\";\nimport EntityView from \"./views/entityDetail\";\nimport AreasView from \"./views/areas\";\n\nexport default function App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n            <Route index element={<Home />} />\n            <Route path=\"home\" element={<Home />} />\n            <Route path=\"devices\" element={<EntitiesView context={'devices'} />} />\n            <Route path=\"devices/:id\" element={<EntityView context={'area'} /> } />\n            <Route path=\"areas\" element={<AreasView />} />\n            <Route path=\"areas/:id\" element={<EntitiesView context={'area'} />} />\n          <Route path=\"*\" element={<NoMatch />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <div style={{ marginTop: 20 }}>\n        <NavBar />\n        <main className=\"main-content\" id=\"main-content\">\n          <div className=\"mdc-drawer-app-content mdc-top-app-bar--fixed-adjust\">\n            {/* An <Outlet> renders whatever child route is currently active,\n          so you can think about this <Outlet> as a placeholder for\n          the child routes we defined above. */}\n            <Outlet />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2 style={{ float: \"right\" }}>Home</h2>\n    </div>\n  );\n}\n\nfunction Dashboard() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n    </div>\n  );\n}\n\nfunction NoMatch() {\n  return (\n    <div>\n      <h2>Nothing to see here!</h2>\n      <p>\n        <Link to=\"/\">Go to the home page</Link>\n      </p>\n    </div>\n  );\n}\n","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/navBar.js",[],[],"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/views/entityDetail.js",[],[],"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/views/areas.js",[],[],"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/views/entities.js",["68"],[],"import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default class EntitiesView extends React.Component {\n  constructor(props) {\n    super(props);\n    let context = props.context;\n    this.state = {\n      error: null,\n      isLoaded: false,\n      entities: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost/VSV/SAT/API/entities\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            entities: result.list,\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: \"Error loading entities\",\n          });\n        }\n      );\n  }\n\n  render() {\n    return (\n      <div>\n        {/* Header Bar With Search */}\n        <div className=\"areas-header\">\n          <span className=\"header networkingDeviceList\">\n            <span>\n              <span>Page Title </span>\n              <span className=\"header-badge\">4 Areas</span>\n            </span>\n            <input\n              type=\"text\"\n              className=\"devicesSearch\"\n              placeholder=\"Search\"\n              data-bind=\"textInput: deviceSearchQuery, event:{ change: $root.filterNetworkingDevices}\"\n              style={{ marginRight: 16 }}\n            />\n          </span>\n        </div>\n        {/*Devices Table*/}\n        <div className=\"table-wrapper\">\n          <table className=\"fancy-table\">\n            <thead>\n              <tr>\n                <th>IP</th>\n                <th>Name</th>\n                <th>LOCATION</th>\n                <th>Notes</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.entities.map((entity) => (\n                <EntityRow entity={entity} key={entity.DEVICE_ID} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction EntityRow(props) {\n  const navigate = useNavigate();\n  const entity = props.entity;\n\n  function handleClick() {\n    navigate(\"/devices/\" + entity.DEVICE_ID);\n  }\n\n  return (\n    <tr onClick={handleClick}>\n      <td {...{ \"td-online-badge\": \"somevalue\" }} >{entity.IP_ADDRESS}</td>\n      <td>{entity.NAME}</td>\n      <td>{entity.LOCATION}</td>\n      <td>{entity.NOTES}</td>\n    </tr>\n  );\n}\n","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/entityFieldGroups.js",[],[],"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/entitySideDetail.js",["69"],[],"import React from \"react\";\nimport UptimeChart from \"./uptimeChart\";\n\nexport default class EntitySideDetail extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      activity: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      `http://localhost/VSV/SAT/API/getEntityActivity.php?entityId=${this.props.entityId}`\n    )\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            activity: result.list,\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: \"Error loading entities\",\n          });\n        }\n      );\n  }\n\n  render() {\n    return (\n      <div className=\"class-detail side-detail\">\n        <UptimeChart entityId={this.props.entityId} />\n\n        <h5>Activity</h5>\n\n        {this.state.isLoaded ? (\n          <div>\n            {this.state.activity.map((item, index) => (\n              <div\n                className={\"inbox-task \" + (item.isRecent ? \"recentFeed\" : \"\")}\n                key={item.id}\n              >\n                <div className=\"forms\">\n                  <div className=\"min_foto\">\n                    <img\n                      className=\"dwimg\"\n                      src={item.image}\n                      alt={\"profile picture\"}\n                    />\n                  </div>\n                  <h5>\n                    <span>{item.title}</span>\n                  </h5>\n                  <h4>\n                    <span>{item.description}</span>\n                  </h4>\n                  <h5>\n                    <span>{item.relativeTime}</span>\n                  </h5>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div>Loading...</div>\n        )}\n      </div>\n    );\n  }\n}\n","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/loading.js",[],[],"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/uptimeChart.js",["70"],[],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\",\n    },\n    title: {\n      display: false,\n    },\n  },\n  scales: { y: { max: 105, min: 0, ticks: { beginAtZero: true } } },\n};\n\nconst loadingChart = {\n  data: {\n    labels: [...Array(10).keys()].map((x) => \"Loading...\"),\n    datasets: [\n      {\n        label: \"Uptime\",\n        data: [0],\n        borderColor: \"grey\",\n        backgroundColor: \"grey\",\n      },\n    ],\n  },\n};\n\nexport default class UptimeChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggleSelectedChartType = this.toggleSelectedChartType.bind(this); // https://stackoverflow.com/a/32317459\n    this.state = {\n      chartType: \"Hourly\",\n      uptimeChart: loadingChart,\n    };\n  }\n\n  componentDidMount() {\n    this.getUptime();\n  }\n\n  getUptime() {\n    this.setState({\n      uptimeChart: loadingChart,\n    });\n    fetch(\n      `http://localhost/VSV/SAT/API/getEntityUptime.php?id=${this.props.entityId}&type=${this.state.chartType}`\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        this.setState({\n          uptimeChart: {\n            data: result.data,\n          },\n        });\n      });\n  }\n\n  toggleSelectedChartType() {\n    if (this.state.chartType === \"Hourly\") {\n      this.setState({\n        chartType: \"Daily\",\n      });\n    } else {\n      this.setState({\n        chartType: \"Hourly\",\n      });\n    }\n    this.getUptime();\n  }\n\n  render() {\n    return (\n      <div>\n        <h5>\n          <span>Uptime</span>\n          <a\n            className=\"link\"\n            style={{ float: \"right\" }}\n            onClick={this.toggleSelectedChartType}\n          >\n            {this.state.chartType}\n          </a>\n        </h5>\n\n        <Line\n          options={options}\n          data={this.state.uptimeChart.data}\n          width={\"656px\"}\n          height={\"328px\"}\n          style={{\n            display: \"block\",\n            boxSizing: \"border-box\",\n            height: \"164px\",\n            width: \"328px\",\n          }}\n        />\n      </div>\n    );\n  }\n}\n","/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/components/entityField.js",["71","72"],[],"import React from \"react\";\nimport $ from \"jquery\";\n\nexport default class EntityField extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <table className=\"entity-field\">\n        <tbody>\n          <tr>\n            <td>\n              <span id={\"field-label-status-\" + this.props.field.htmlId}>\n                {this.props.field.label}\n              </span>\n            </td>\n            <td style={{width: '1%'}}>\n              {this.props.field.type === \"select\" ? (\n                <EntityField_Select field={this.props.field} />\n              ) : (\n                <EntityField_Common field={this.props.field} />\n              )}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass EntityField_Select extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <select\n        id={this.props.field.htmlId}\n        style={{\n          marginLeft: \"inherit\",\n        }}\n      >\n        <option value=\"f\">Select</option>\n        <option value=\"dd\">Front Balcony</option>\n        <option value=\"dd\">Front Hdff</option>\n      </select>\n    );\n  }\n}\n\nfunction EntityField_Common(props) {\n  // autosave timing\n  const [fieldText, setFieldText] = React.useState(props.field.value);\n  // autosave response handling\n  const [cssStatusResponse, setCssStatusResponse] = React.useState(\"\");\n\n  function handleChange(newValue) {\n    setFieldText(newValue);\n      // check if save timeouts exists\n      if (!window.saveTimeouts) {\n          window.saveTimeouts = {};\n      }\n      // clear save timeout as the user is editing\n      if (window.saveTimeouts[props.field.parentEntityId]) window.clearTimeout(window.saveTimeouts[props.field.parentEntityId]);\n      // Store the timeout id again\n      window.saveTimeouts[props.field.parentEntityId] = window.setTimeout(() =>{\n          console.log('Saving ' + props.field.parentEntityId);\n          $.get(\n              \"http://localhost/VSV/SAT/API/saveEntityField.php\",\n              {\n                  entityId: props.field.parentEntityId,\n                  fieldId: props.field.htmlId,\n                  value: fieldText,\n              },\n              (response) => {\n                  setCssStatusResponse(response.cssStatus);\n                  if (response.success === true) {\n                      setTimeout(() => {\n                          if (newValue !== props.field.value) {\n                              setCssStatusResponse(\"\");\n                          }\n                      }, 3000);\n                  }\n              }\n          );\n      }, 400);\n  }\n\n  return (\n    <div>\n      <input\n        id={props.field.htmlId}\n        type={props.field.type}\n        value={fieldText}\n        placeholder={props.field.placeholder}\n        onChange={(e) => handleChange(e.target.value)}\n      />\n      <span dangerouslySetInnerHTML={{ __html: cssStatusResponse }} />\n    </div>\n  );\n}\n",{"ruleId":"73","severity":1,"message":"74","line":59,"column":10,"nodeType":"75","messageId":"76","endLine":59,"endColumn":19},{"ruleId":"73","severity":1,"message":"77","line":7,"column":9,"nodeType":"75","messageId":"76","endLine":7,"endColumn":16},{"ruleId":"78","severity":1,"message":"79","line":54,"column":21,"nodeType":"80","endLine":58,"endColumn":23},{"ruleId":"81","severity":1,"message":"82","line":100,"column":11,"nodeType":"80","endLine":104,"endColumn":12},{"ruleId":"83","severity":1,"message":"84","line":22,"column":17,"nodeType":"80","messageId":"85","endLine":22,"endColumn":64},{"ruleId":"83","severity":1,"message":"86","line":24,"column":17,"nodeType":"80","messageId":"85","endLine":24,"endColumn":64},"no-unused-vars","'Dashboard' is defined but never used.","Identifier","unusedVar","'context' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react/jsx-pascal-case","Imported JSX component EntityField_Select must be in PascalCase or SCREAMING_SNAKE_CASE","usePascalOrSnakeCase","Imported JSX component EntityField_Common must be in PascalCase or SCREAMING_SNAKE_CASE"]