{"ast":null,"code":"import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import EntitySideDetail from\"../components/entitySideDetail\";import{useParams}from\"react-router-dom\";import EntityFieldGroups from\"../components/entityFieldGroups\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function EntityView(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoaded=_useState4[0],setIsLoaded=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),entity=_useState6[0],setEntity=_useState6[1];var params=useParams();var entityId=params.id;// Note: the empty deps array [] means\n// this useEffect will run once\n// similar to componentDidMount()\nuseEffect(function(){fetch(\"http://localhost/VSV/SAT/API/getEntity.php?id=\".concat(entityId)).then(function(res){return res.json();}).then(function(result){setIsLoaded(true);setEntity(result);},// Note: it's important to handle errors here\n// instead of a catch() block so that we don't swallow\n// exceptions from actual bugs in components.\nfunction(error){setIsLoaded(true);setError(error);});},[entityId]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"areas-header\",children:/*#__PURE__*/_jsx(\"span\",{className:\"header networkingDeviceList\",children:/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"span\",{children:entity.ip_address}),/*#__PURE__*/_jsx(\"span\",{className:\"header-badge\",children:isLoaded?entity.type:'Loading...'})]})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"table-wrapper\",children:[/*#__PURE__*/_jsx(EntityFieldGroups,{sections:entity.sections}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error\",children:[\"Error: \",error.message]}),/*#__PURE__*/_jsx(EntitySideDetail,{entityId:entityId})]})]});}","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/VSV/SAT/Frontend/src/views/entityDetail.js"],"names":["React","useEffect","useState","EntitySideDetail","useParams","EntityFieldGroups","EntityView","error","setError","isLoaded","setIsLoaded","entity","setEntity","params","entityId","id","fetch","then","res","json","result","ip_address","type","sections","message"],"mappings":"4IAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,gBAAP,KAA6B,gCAA7B,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,iCAA9B,C,wFAEA,cAAe,SAASC,CAAAA,UAAT,EAAsB,CACnC,cAA0BJ,QAAQ,CAAC,IAAD,CAAlC,wCAAOK,KAAP,eAAcC,QAAd,eACA,eAAgCN,QAAQ,CAAC,KAAD,CAAxC,yCAAOO,QAAP,eAAiBC,WAAjB,eACA,eAA4BR,QAAQ,CAAC,EAAD,CAApC,yCAAOS,MAAP,eAAeC,SAAf,eAEA,GAAIC,CAAAA,MAAM,CAAGT,SAAS,EAAtB,CACA,GAAIU,CAAAA,QAAQ,CAAGD,MAAM,CAACE,EAAtB,CAEA;AACA;AACA;AACAd,SAAS,CAAC,UAAM,CACde,KAAK,yDAAkDF,QAAlD,EAAL,CACGG,IADH,CACQ,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EADR,EAEGF,IAFH,CAGI,SAACG,MAAD,CAAY,CACVV,WAAW,CAAC,IAAD,CAAX,CACEE,SAAS,CAACQ,MAAD,CAAT,CACH,CANL,CAOI;AACA;AACA;AACA,SAACb,KAAD,CAAW,CACTG,WAAW,CAAC,IAAD,CAAX,CACAF,QAAQ,CAACD,KAAD,CAAR,CACD,CAbL,EAeD,CAhBQ,CAgBN,CAACO,QAAD,CAhBM,CAAT,CAkBA,mBACE,oCAEE,YAAK,SAAS,CAAC,cAAf,uBACE,aAAM,SAAS,CAAC,6BAAhB,uBACE,qCACE,sBAAOH,MAAM,CAACU,UAAd,EADF,cAEE,aAAM,SAAS,CAAC,cAAhB,UAAgCZ,QAAQ,CAAGE,MAAM,CAACW,IAAV,CAAiB,YAAzD,EAFF,GADF,EADF,EAFF,cAWE,aAAK,SAAS,CAAC,eAAf,wBAEI,KAAC,iBAAD,EAAmB,QAAQ,CAAEX,MAAM,CAACY,QAApC,EAFJ,CAGKhB,KAAK,eAAI,aAAK,SAAS,CAAC,OAAf,qBAA+BA,KAAK,CAACiB,OAArC,GAHd,cAKE,KAAC,gBAAD,EAAkB,QAAQ,CAAEV,QAA5B,EALF,GAXF,GADF,CAqBD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport EntitySideDetail from \"../components/entitySideDetail\";\nimport { useParams } from \"react-router-dom\";\nimport EntityFieldGroups from \"../components/entityFieldGroups\";\n\nexport default function EntityView() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [entity, setEntity] = useState([]);\n\n  let params = useParams();\n  let entityId = params.id;\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(`http://localhost/VSV/SAT/API/getEntity.php?id=${entityId}`)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n            setEntity(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, [entityId]);\n\n  return (\n    <div>\n      {/*Header Bar */}\n      <div className=\"areas-header\">\n        <span className=\"header networkingDeviceList\">\n          <span>\n            <span>{entity.ip_address}</span>\n            <span className=\"header-badge\">{isLoaded ? entity.type : 'Loading...'}</span>\n          </span>\n        </span>\n      </div>\n      {/*Main Content*/}\n      <div className=\"table-wrapper\">\n          {/*Main Detail */}\n          <EntityFieldGroups sections={entity.sections} />\n          {error && <div className=\"error\">Error: {error.message}</div>}\n          {/*Side Detail */}\n        <EntitySideDetail entityId={entityId} />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}