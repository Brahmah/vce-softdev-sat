{"ast":null,"code":"var _jsxFileName = \"/Users/bashirrahmah/Desktop/Random Projects/vsv_react_app/vsv-react-app/src/components/uptimeChart.js\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\"\n    },\n    title: {\n      display: false\n    }\n  },\n  scales: {\n    y: {\n      max: 105,\n      min: 0,\n      ticks: {\n        beginAtZero: true\n      }\n    }\n  }\n};\nconst loadingChart = {\n  data: {\n    labels: [...Array(10).keys()].map(x => \"Loading...\"),\n    datasets: [{\n      label: \"Uptime\",\n      data: [0],\n      borderColor: \"grey\",\n      backgroundColor: \"grey\"\n    }]\n  }\n};\nexport default class UptimeChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggleSelectedChartType = this.toggleSelectedChartType.bind(this); // https://stackoverflow.com/a/32317459\n\n    this.state = {\n      chartType: \"Hourly\",\n      uptimeChart: loadingChart\n    };\n  }\n\n  componentDidMount() {\n    this.getUptime();\n  }\n\n  getUptime() {\n    this.setState({\n      uptimeChart: loadingChart\n    });\n    fetch(`http://localhost/VSV/SAT/API/getEntityUptime.php?id=${this.props.entityId}&type=${this.state.chartType}`).then(res => res.json()).then(result => {\n      this.setState({\n        uptimeChart: {\n          data: result.data\n        }\n      });\n    });\n  }\n\n  toggleSelectedChartType() {\n    if (this.state.chartType === \"Hourly\") {\n      this.setState({\n        chartType: \"Daily\"\n      });\n    } else {\n      this.setState({\n        chartType: \"Hourly\"\n      });\n    }\n\n    this.getUptime();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Uptime\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"link\",\n          style: {\n            float: \"right\"\n          },\n          onClick: this.toggleSelectedChartType,\n          children: this.state.chartType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        options: options,\n        data: this.state.uptimeChart.data,\n        width: \"656px\",\n        height: \"328px\",\n        style: {\n          display: \"block\",\n          boxSizing: \"border-box\",\n          height: \"164px\",\n          width: \"328px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/bashirrahmah/Desktop/Random Projects/vsv_react_app/vsv-react-app/src/components/uptimeChart.js"],"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","options","responsive","plugins","legend","position","title","display","scales","y","max","min","ticks","beginAtZero","loadingChart","data","labels","Array","keys","map","x","datasets","label","borderColor","backgroundColor","UptimeChart","Component","constructor","props","toggleSelectedChartType","bind","state","chartType","uptimeChart","componentDidMount","getUptime","setState","fetch","entityId","then","res","json","result","render","float","boxSizing","height","width"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\",\n    },\n    title: {\n      display: false,\n    },\n  },\n  scales: { y: { max: 105, min: 0, ticks: { beginAtZero: true } } },\n};\n\nconst loadingChart = {\n  data: {\n    labels: [...Array(10).keys()].map((x) => \"Loading...\"),\n    datasets: [\n      {\n        label: \"Uptime\",\n        data: [0],\n        borderColor: \"grey\",\n        backgroundColor: \"grey\",\n      },\n    ],\n  },\n};\n\nexport default class UptimeChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggleSelectedChartType = this.toggleSelectedChartType.bind(this); // https://stackoverflow.com/a/32317459\n    this.state = {\n      chartType: \"Hourly\",\n      uptimeChart: loadingChart,\n    };\n  }\n\n  componentDidMount() {\n    this.getUptime();\n  }\n\n  getUptime() {\n    this.setState({\n      uptimeChart: loadingChart,\n    });\n    fetch(\n      `http://localhost/VSV/SAT/API/getEntityUptime.php?id=${this.props.entityId}&type=${this.state.chartType}`\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        this.setState({\n          uptimeChart: {\n            data: result.data,\n          },\n        });\n      });\n  }\n\n  toggleSelectedChartType() {\n    if (this.state.chartType === \"Hourly\") {\n      this.setState({\n        chartType: \"Daily\",\n      });\n    } else {\n      this.setState({\n        chartType: \"Hourly\",\n      });\n    }\n    this.getUptime();\n  }\n\n  render() {\n    return (\n      <div>\n        <h5>\n          <span>Uptime</span>\n          <a\n            className=\"link\"\n            style={{ float: \"right\" }}\n            onClick={this.toggleSelectedChartType}\n          >\n            {this.state.chartType}\n          </a>\n        </h5>\n\n        <Line\n          options={options}\n          data={this.state.uptimeChart.data}\n          width={\"656px\"}\n          height={\"328px\"}\n          style={{\n            display: \"block\",\n            boxSizing: \"border-box\",\n            height: \"164px\",\n            width: \"328px\",\n          }}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}