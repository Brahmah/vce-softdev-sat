{"ast":null,"code":"var _jsxFileName = \"/Users/bashirrahmah/Desktop/Random Projects/vsv_react_app/vsv-react-app/src/views/entityDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport EntitySideDetail from \"../components/entitySideDetail\";\nimport { useParams } from \"react-router-dom\";\nimport EntityFieldGroups from \"../components/entityFieldGroups\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EntityView() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [entity, setEntity] = useState([]);\n  let params = useParams();\n  let entityId = params.id; // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(`http://localhost/VSV/SAT/API/getEntity.php?id=${entityId}`).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setEntity(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"areas-header\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"header networkingDeviceList\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: entity.ip_address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"header-badge\",\n            children: isLoaded ? entity.type : \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(EntityFieldGroups, {\n        sections: entity.sections\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EntitySideDetail, {\n      entityId: entityId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EntityView, \"q+6Htr7IXnkrGCb6S5EIyuqJ9lA=\", false, function () {\n  return [useParams];\n});\n\n_c = EntityView;\n\nvar _c;\n\n$RefreshReg$(_c, \"EntityView\");","map":{"version":3,"sources":["/Users/bashirrahmah/Desktop/Random Projects/vsv_react_app/vsv-react-app/src/views/entityDetail.js"],"names":["React","useEffect","useState","EntitySideDetail","useParams","EntityFieldGroups","EntityView","error","setError","isLoaded","setIsLoaded","entity","setEntity","params","entityId","id","fetch","then","res","json","result","ip_address","type","sections"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AAEA,MAAIW,MAAM,GAAGT,SAAS,EAAtB;AACA,MAAIU,QAAQ,GAAGD,MAAM,CAACE,EAAtB,CANmC,CAQnC;AACA;AACA;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,KAAK,CAAE,iDAAgDF,QAAS,EAA3D,CAAL,CACGG,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVV,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,SAAS,CAACQ,MAAD,CAAT;AACD,KANL,EAOI;AACA;AACA;AACCb,IAAAA,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACE;AAAA,4BAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAM,QAAA,SAAS,EAAC,6BAAhB;AAAA,+BACE;AAAA,kCACE;AAAA,sBAAOI,MAAM,CAACU;AAAd;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAM,YAAA,SAAS,EAAC,cAAhB;AAAA,sBACGZ,QAAQ,GAAGE,MAAM,CAACW,IAAV,GAAiB;AAD5B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAaE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BAEE,QAAC,iBAAD;AAAmB,QAAA,QAAQ,EAAEX,MAAM,CAACY;AAApC;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YAbF,eAkBE,QAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAET;AAA5B;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAnDuBR,U;UAKTF,S;;;KALSE,U","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport EntitySideDetail from \"../components/entitySideDetail\";\nimport { useParams } from \"react-router-dom\";\nimport EntityFieldGroups from \"../components/entityFieldGroups\";\n\nexport default function EntityView() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [entity, setEntity] = useState([]);\n\n  let params = useParams();\n  let entityId = params.id;\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(`http://localhost/VSV/SAT/API/getEntity.php?id=${entityId}`)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setEntity(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n\n  return (\n    <div>\n      {/*Header Bar */}\n      <div className=\"areas-header\">\n        <span className=\"header networkingDeviceList\">\n          <span>\n            <span>{entity.ip_address}</span>\n            <span className=\"header-badge\">\n              {isLoaded ? entity.type : \"Loading...\"}\n            </span>\n          </span>\n        </span>\n      </div>\n      {/*Main Content*/}\n      <div className=\"table-wrapper\">\n        {/*Main Detail */}\n        <EntityFieldGroups sections={entity.sections} />\n      </div>\n      {/*Side Detail */}\n      <EntitySideDetail entityId={entityId} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}